[tool.black]
line-length = 79

[tool.pycln]
all = true

[tool.isort]
profile = "black"
line_length = 79
known_first_party = ["torchfl"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
# Add all the modules with missing type stubs here.
module = [
    "torchvision.*"
    ]
ignore_missing_imports = true

[tool.doc8]
max-line-length = 79
sphinx = true

[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = [
  "B",
  "C4",
  "E7", "E9",
  "EXE",
  "I",
  "ICN",
  "W",
  "F",
  "PT",
  "RUF",
  # uncomment below line when new ruff is bundled in vscode extension
  # "SIM",
  "UP",
]
ignore = ["EXE001", "I001", "B008"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "UP", "PT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 79

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["tests"]
addopts = "-ra -q"
markers = [
    "datamodules_cifar10: mark test as a datamodules_cifar10 test.",
    "datamodules_cifar100: mark test as a datamodules_cifar100 test.",
    "datamodules_emnist_balanced: mark test as a datamodules_emnist_balanced test.",
    "datamodules_emnist_byclass: mark test as a datamodules_emnist_byclass test.",
    "datamodules_emnist_bymerge: mark test as a datamodules_emnist_bymerge test.",
    "datamodules_emnist_digits: mark test as a datamodules_emnist_digits test.",
    "datamodules_emnist_letters: mark test as a datamodules_emnist_letters test.",
    "datamodules_emnist_mnist: mark test as a datamodules_emnist_mnist test.",
    "datamodules_fashionmnist: mark test as a datamodules_fashionmnist test.",
]

[tool.poetry]
name = "torchfl"
version = "0.1.9"
description = "A Python library for rapid prototyping, experimenting, and logging of federated learning using state-of-the-art models and datasets. Built using PyTorch and PyTorch Lightning."
authors = ["vivekkhimani <vivekkhimani07@gmail.com>"]
license = "GNU General Public License v3"
readme = "README.md"
homepage = "https://torchfl.readthedocs.io/en/latest/"
repository = "https://github.com/vivekkhimani/torchfl"
documentation = "https://torchfl.readthedocs.io/en/latest/"
keywords = ["federated-learning", "pytorch", "pytorch-lightning", "torchfl"]
classifiers=[
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
]
include=[
    "LICENSE",
    "README.md",
    "AUTHORS.rst",
    "CONTRIBUTING.rst",
    "HISTORY.rst",
]

[tool.poetry.dependencies]
python = "^3.10"
numpy = "^1.24.2"
rich = "^13.3.1"
torch = "~1.13"
torchvision = "~0.14"
pytorch-lightning = "~1.9"
pytest = "^7.2.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
